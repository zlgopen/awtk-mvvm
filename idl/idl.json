[
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          },
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "请求参数对象。"
          },
          {
            "type": "view_model_t**",
            "name": "vm",
            "desc": "view view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "初始化。\n\n> 内部自动增加req和vm的引用计数。",
        "name": "binding_context_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          },
          {
            "type": "binding_context_t*",
            "name": "parent",
            "desc": "parent binding_context对象。"
          }
        ],
        "annotation": {},
        "desc": "设置父context。",
        "name": "binding_context_set_parent",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          }
        ],
        "annotation": {},
        "desc": "更新数据到视图。",
        "name": "binding_context_update_to_view",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          },
          {
            "type": "const char*",
            "name": "cmd",
            "desc": "命令名。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令参数。"
          }
        ],
        "annotation": {},
        "desc": "执行内置命令。",
        "name": "binding_context_exec",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          },
          {
            "type": "const char*",
            "name": "cmd",
            "desc": "命令名。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令参数。"
          }
        ],
        "annotation": {},
        "desc": "检查内置命令是否可以执行。",
        "name": "binding_context_can_exec",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示可以执行，否则表示不可以执行。"
        }
      },
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "更新数据到模型。",
        "name": "binding_context_update_to_model",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "清除绑定规则(用于重新绑定)。",
        "name": "binding_context_clear_bindings",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          },
          {
            "type": "void*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {},
        "desc": "绑定指定控件。\n> 目前主要用于特殊控件(如table view)实现自定义绑定。",
        "name": "binding_context_bind",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          },
          {
            "type": "void*",
            "name": "widget",
            "desc": "控件对象。"
          }
        ],
        "annotation": {},
        "desc": "针对指定控件的update to view。\n\n> 目前主要用于特殊控件(如table view)实现自定义绑定。",
        "name": "binding_context_update_widget",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "binding_context对象。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "销毁binding context对象。",
        "name": "binding_context_destroy",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "binding_rule_parse"
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "command_bindings",
        "desc": "命令绑定规则集合。",
        "type": "darray_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "data_bindings",
        "desc": "数据绑定规则集合。",
        "type": "darray_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "bound",
        "desc": "已经完成绑定。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "updating_view",
        "desc": "正在更新视图。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "updating_model",
        "desc": "正在更新模型。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "update_view_idle_id",
        "desc": "更新view的idle的id",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "request_rebind",
        "desc": "请求Rebind的次数（真正Rebind在idle中完成）。",
        "type": "int32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "current_widget",
        "desc": "当前正在绑定的控件。",
        "type": "void*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "view_model",
        "desc": "ViewModel",
        "type": "view_model_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor;",
        "desc": "用于数组ViewModel。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "widget",
        "desc": "绑定的根控件。",
        "type": "void*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "navigator_request",
        "desc": "请求参数。",
        "type": "navigator_request_t*",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/binding_context.h",
    "desc": "主要负责绑定规则的管理。",
    "name": "binding_context_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "初始化自定义绑定器。",
        "name": "custom_binder_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "控件的类型。"
          }
        ],
        "annotation": {},
        "desc": "检查自定义绑定器是否存在。",
        "name": "custom_binder_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "控件的类型。"
          },
          {
            "type": "custom_bind_t",
            "name": "bind",
            "desc": "创建函数。"
          }
        ],
        "annotation": {},
        "desc": "注册模型的自定义绑定器。",
        "name": "custom_binder_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "控件的类型。"
          }
        ],
        "annotation": {},
        "desc": "注销自定义绑定器。",
        "name": "custom_binder_unregister",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "模型的类型。"
          },
          {
            "type": "void*",
            "name": "widget",
            "desc": "控件。"
          },
          {
            "type": "binding_context_t*",
            "name": "ctx",
            "desc": "ctx对象。"
          }
        ],
        "annotation": {},
        "desc": "自定义绑定。",
        "name": "custom_binder_bind",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "~初始化自定义绑定器。",
        "name": "custom_binder_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/custom_binder.h",
    "desc": "自定义绑定器。",
    "name": "custom_binder_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "更新模型的时机。",
    "consts": [
      {
        "desc": "编辑完成时才触发，即回车会或失去焦点时更新数据到模型。",
        "name": "UPDATE_WHEN_CHANGED"
      },
      {
        "desc": "编辑时实时触发，在编辑时实时更新数据到模型。",
        "name": "UPDATE_WHEN_CHANGING"
      },
      {
        "desc": "需要显式触发。\n一般在命令绑定规则中指定的UpdateModel=True，执行命令前自动调用UpdateModel。",
        "name": "EUPDATE_WHEN_EXPLICIT"
      }
    ],
    "header": "base/data_binding.h",
    "name": "update_model_trigger_t",
    "prefix": "UPDATE_WHEN_",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "绑定模式。",
    "consts": [
      {
        "desc": "双向绑定，模型变化时自动更新视图，视图上数据变化时自动更新模型。",
        "name": "BINDING_TWO_WAY"
      },
      {
        "desc": "单向绑定，模型变化时自动更新视图。",
        "name": "BINDING_ONE_WAY"
      },
      {
        "desc": "单向绑定，视图上数据变化时自动更新模型。",
        "name": "BINDING_ONE_WAY_TO_VIEW_MODEL"
      },
      {
        "desc": "单向绑定，仅仅绑定一次。",
        "name": "BINDING_ONCE"
      }
    ],
    "header": "base/data_binding.h",
    "name": "binding_mode_t",
    "prefix": "BINDING_",
    "annotation": {
      "scriptable": true
    },
    "level": 1
  },
  {
    "params": [
      {
        "type": "const char*",
        "name": "name",
        "desc": "属性名。"
      },
      {
        "type": "uint32_t*",
        "name": "index",
        "desc": "返回索引。"
      }
    ],
    "annotation": {
      "global": true
    },
    "desc": "从完整属性名中取出属性名和索引。",
    "name": "tk_destruct_array_prop_name",
    "return": {
      "type": "const char*",
      "desc": "返回属性名。"
    },
    "type": "method",
    "header": "base/utils.h",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "初始化模型工厂。",
        "name": "view_model_factory_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "模型的类型。"
          }
        ],
        "annotation": {},
        "desc": "检查指定的模型是否存在。",
        "name": "view_model_factory_exist",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "模型的类型。"
          },
          {
            "type": "view_model_create_t",
            "name": "create",
            "desc": "创建函数。"
          }
        ],
        "annotation": {},
        "desc": "注册模型的创建函数。",
        "name": "view_model_factory_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "模型的类型。"
          }
        ],
        "annotation": {},
        "desc": "注销模型的创建函数。",
        "name": "view_model_factory_unregister",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "模型的类型。"
          },
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "请求参数。"
          }
        ],
        "annotation": {},
        "desc": "创建模型。",
        "name": "view_model_factory_create_model",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "~初始化模型工厂。",
        "name": "view_model_factory_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/view_model_factory.h",
    "desc": "模型工厂。",
    "name": "view_model_factory_t",
    "level": 1
  },
  {
    "type": "enum",
    "desc": "模型相关的事件。",
    "consts": [
      {
        "desc": "打开视图即将加载模型时通知view_model。",
        "name": "EVT_VIEW_MODEL_WILL_MOUNT"
      },
      {
        "desc": "视图与模型绑定完成后通知模型。",
        "name": "EVT_VIEW_MODEL_MOUNT"
      },
      {
        "desc": "视图即将关闭时通知模型。",
        "name": "EVT_VIEW_MODEL_WILL_UNMOUNT"
      },
      {
        "desc": "视图销毁时通知模型。",
        "name": "EVT_VIEW_MODEL_UNMOUNT"
      }
    ],
    "header": "base/view_model.h",
    "name": "view_model_event_type_t",
    "prefix": "VIEW_MODEL_EVENT_TYPE_",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "初始化。",
        "name": "device_factory_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "类型。"
          }
        ],
        "annotation": {},
        "desc": "检查是否存在。",
        "name": "device_factory_has",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示存在，否则表示FALSE表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "类型。"
          }
        ],
        "annotation": {},
        "desc": "注销。",
        "name": "device_factory_unregister",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "类型。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "参数。"
          }
        ],
        "annotation": {},
        "desc": "创建设备。",
        "name": "device_factory_create_device",
        "return": {
          "type": "object_t",
          "desc": "返回object对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "type",
            "desc": "类型。"
          },
          {
            "type": "device_object_create_t",
            "name": "create",
            "desc": "创建回调函数指针。"
          }
        ],
        "annotation": {},
        "desc": "注册。",
        "name": "device_factory_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "~初始化。",
        "name": "device_factory_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "hardware/device_factory.h",
    "desc": "设备工厂。",
    "name": "device_factory_t",
    "level": 1
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "控件对象。"
          },
          {
            "type": "binding_context_t*",
            "name": "parent_ctx",
            "desc": "父ctx。"
          },
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "请求参数。"
          }
        ],
        "annotation": {},
        "desc": "创建binding_context对象。",
        "name": "binding_context_awtk_create",
        "return": {
          "type": "binding_context_t*",
          "desc": "返回binding_context对象。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "binding_context_bind_for_window"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "初始化MVVM awtk",
        "name": "mvvm_awtk_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "~初始化MVVM awtk",
        "name": "mvvm_awtk_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "awtk/binding_context_awtk.h",
    "desc": "binding_context_awtk",
    "name": "binding_context_awtk_t",
    "parent": "binding_context_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "parent",
            "desc": "父控件"
          },
          {
            "type": "xy_t",
            "name": "x",
            "desc": "x坐标"
          },
          {
            "type": "xy_t",
            "name": "y",
            "desc": "y坐标"
          },
          {
            "type": "wh_t",
            "name": "w",
            "desc": "宽度"
          },
          {
            "type": "wh_t",
            "name": "h",
            "desc": "高度"
          },
          {
            "type": "const char*",
            "name": "type",
            "desc": "设备类型。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "创建参数。"
          }
        ],
        "annotation": {
          "constructor": true,
          "scriptable": true
        },
        "desc": "创建widget_hardware对象",
        "name": "widget_hardware_create",
        "return": {
          "type": "widget_t*",
          "desc": "对象。"
        }
      },
      {
        "params": [
          {
            "type": "widget_t*",
            "name": "widget",
            "desc": "widget_hardware对象。"
          }
        ],
        "annotation": {
          "cast": true,
          "scriptable": true
        },
        "desc": "转换为widget_hardware对象(供脚本语言使用)。",
        "name": "widget_hardware_cast",
        "return": {
          "type": "widget_t*",
          "desc": "widget_hardware对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "awtk/widget_hardware.h",
    "desc": "wrap hardware device to a widget",
    "name": "widget_hardware_t",
    "parent": "widget_t",
    "annotation": {
      "scriptable": true,
      "design": true,
      "widget": true
    },
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "widget",
        "desc": "绑定的控件。",
        "type": "void*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "binding_context",
        "desc": "绑定的上下文。",
        "type": "binding_context_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "view_model",
        "desc": "绑定的ViewModel。",
        "type": "view_model_t*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "cursor;",
        "desc": "对于数组的ViewModel，保存cursor。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/binding_rule.h",
    "desc": "绑定规则基类。",
    "name": "binding_rule_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称。"
          },
          {
            "type": "navigator_handler_on_request_t",
            "name": "on_request",
            "desc": "用于非模态窗口返回结果的回调函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建handler对象。",
        "name": "navigator_handler_create",
        "return": {
          "type": "ret_t",
          "desc": "返回handler对象。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_handler_t*",
            "name": "handler",
            "desc": "handler对象。"
          },
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "处理请求。"
          }
        ],
        "annotation": {},
        "desc": "调用本函数处理请求。",
        "name": "navigator_handler_on_request",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/navigator_handler.h",
    "desc": "处理导航请求。",
    "name": "navigator_handler_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称。"
          },
          {
            "type": "navigator_request_on_result_t",
            "name": "on_result",
            "desc": "用于非模态窗口返回结果的回调函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建request对象。",
        "name": "navigator_request_create",
        "return": {
          "type": "navigator_request_t*",
          "desc": "返回request对象。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "request对象。"
          },
          {
            "type": "bool_t",
            "name": "close_current",
            "desc": "关闭当前窗口。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否关闭当前窗口。",
        "name": "navigator_request_set_close_current",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "request对象。"
          },
          {
            "type": "bool_t",
            "name": "open_new",
            "desc": "是否打开新窗口。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "设置是否打开新窗口。\n> 缺省情况下，如果目标窗口存在，则切换到目标窗口，否则打开新窗口。",
        "name": "navigator_request_set_open_new",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "request对象。"
          },
          {
            "type": "const value_t*",
            "name": "result",
            "desc": "结果。"
          }
        ],
        "annotation": {
          "scriptable": true
        },
        "desc": "navigator hander调用本函数返回结果。",
        "name": "navigator_request_on_result",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "target",
        "desc": "目标窗口的名称。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "result",
        "desc": "用于模态窗口返回结果。",
        "type": "value_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "on_result",
        "desc": "用于非模态窗口返回结果。",
        "type": "navigator_request_on_result_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "close_current",
        "desc": "是否关闭当前窗口。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "open_new",
        "desc": "是否总是打开新窗口。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/navigator_request.h",
    "desc": "导航请求，请求打开指定的窗口。\n\n如果需要传递参数给要打开的窗口或需要返回结果给调用者时，才需要本类，否则指定窗口的名字就行了。",
    "name": "navigator_request_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建navigator对象。",
        "name": "navigator_create",
        "return": {
          "type": "ret_t",
          "desc": "返回navigator对象。"
        }
      },
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "获取缺省的navigator对象。",
        "name": "navigator",
        "return": {
          "type": "ret_t",
          "desc": "返回navigator对象。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_t*",
            "name": "nav",
            "desc": "navigator对象。"
          }
        ],
        "annotation": {},
        "desc": "设置缺省navigator对象。",
        "name": "navigator_set",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_t*",
            "name": "nav",
            "desc": "navigator对象。"
          },
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "request对象。"
          }
        ],
        "annotation": {},
        "desc": "处理打开窗口的请求。",
        "name": "navigator_handle_request",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_t*",
            "name": "nav",
            "desc": "navigator对象。"
          },
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称。"
          },
          {
            "type": "navigator_handler_t*",
            "name": "handler",
            "desc": "但请求打开target窗口时，执行本handler。"
          }
        ],
        "annotation": {},
        "desc": "注册请求处理器。",
        "name": "navigator_register_handler",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_t*",
            "name": "nav",
            "desc": "navigator对象。"
          },
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称。"
          }
        ],
        "annotation": {},
        "desc": "检查是否存在指定名称的请求处理器。",
        "name": "navigator_has_handler",
        "return": {
          "type": "ret_t",
          "desc": "返回TRUE表示存在，否则表示不存在。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_t*",
            "name": "nav",
            "desc": "navigator对象。"
          },
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称。"
          }
        ],
        "annotation": {},
        "desc": "注销请求处理器。",
        "name": "navigator_unregister_handler",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称及参数(请参考窗口导航文档)。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "请求打开指定的窗口。",
        "name": "navigator_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称及参数(请参考窗口导航文档)。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "请求打开指定的窗口，并关闭当前窗口。",
        "name": "navigator_replace",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称及参数(请参考窗口导航文档)。"
          },
          {
            "type": "bool_t",
            "name": "close_current",
            "desc": "是否关闭当前窗口。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "如果目标窗口已经存在，直接切换到该窗口，否则打开新窗口。",
        "name": "navigator_switch_to",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "target",
            "desc": "目标窗口的名称。"
          },
          {
            "type": "const char*",
            "name": "key",
            "desc": "参数名。"
          },
          {
            "type": "const char*",
            "name": "value",
            "desc": "参数值。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "请求打开指定的窗口。",
        "name": "navigator_to_with_key_value",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "回到主屏。",
        "name": "navigator_back_to_home",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "关闭当前窗口，回到前一窗口。",
        "name": "navigator_back",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "目标窗口的名称。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "关闭指定窗口。",
        "name": "navigator_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "目标窗口的名称。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "请求关闭关闭指定窗口。\n\n> 窗口是否被关闭，取决于窗口本身的处理逻辑。",
        "name": "navigator_request_close",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "request对象。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "请求打开指定的窗口，并可传递参数和返回结果。",
        "name": "navigator_to_ex",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "content",
            "desc": "信息内容。"
          },
          {
            "type": "uint32_t",
            "name": "timeout",
            "desc": "显示时间。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "显示toast信息。",
        "name": "navigator_toast",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          },
          {
            "type": "const char*",
            "name": "content",
            "desc": "内容。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "显示信息。",
        "name": "navigator_info",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          },
          {
            "type": "const char*",
            "name": "content",
            "desc": "内容。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "显示警告信息。",
        "name": "navigator_warn",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          },
          {
            "type": "const char*",
            "name": "content",
            "desc": "内容。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "显示确认信息。",
        "name": "navigator_confirm",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          },
          {
            "type": "str_t*",
            "name": "result",
            "desc": "用于传递缺省值和返回结果。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "选择目录。",
        "name": "navigator_pick_dir",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          },
          {
            "type": "const char*",
            "name": "filter",
            "desc": "文件过滤(如：.txt.html), NULL表示不过滤。"
          },
          {
            "type": "bool_t",
            "name": "for_save",
            "desc": "TRUE表示用于保存，FALSE表示用于打开。"
          },
          {
            "type": "str_t*",
            "name": "result",
            "desc": "用于传递缺省值和返回结果。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "选择文件。",
        "name": "navigator_pick_file",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "title",
            "desc": "标题。"
          },
          {
            "type": "str_t*",
            "name": "result",
            "desc": "用于传递缺省值和返回结果。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "选择颜色。",
        "name": "navigator_pick_color",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "str_t*",
            "name": "str",
            "desc": "str对象。"
          },
          {
            "type": "const char*",
            "name": "",
            "desc": "。"
          },
          {
            "type": "uint32_t",
            "name": "max",
            "desc": "最大长度。"
          }
        ],
        "annotation": {},
        "desc": "生产一个随机字符串。",
        "name": "str_random",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "str",
            "desc": "表达式。"
          }
        ],
        "annotation": {},
        "desc": "expr eval",
        "name": "tk_expr_eval",
        "return": {
          "type": "double",
          "desc": "返回表达式的值。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/navigator.h",
    "desc": "导航器。负责打开指定的窗口。",
    "name": "navigator_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_converter_t*",
            "name": "converter",
            "desc": "converter对象。"
          },
          {
            "type": "value_t*",
            "name": "from",
            "desc": "源value。"
          },
          {
            "type": "value_t*",
            "name": "to",
            "desc": "转换结果。"
          }
        ],
        "annotation": {},
        "desc": "将value转换成适合model存储的格式。",
        "name": "value_converter_to_model",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_converter_t*",
            "name": "converter",
            "desc": "converter对象。"
          },
          {
            "type": "value_t*",
            "name": "from",
            "desc": "源value。"
          },
          {
            "type": "value_t*",
            "name": "to",
            "desc": "转换结果。"
          }
        ],
        "annotation": {},
        "desc": "将value转换成适合view显示的格式。",
        "name": "value_converter_to_view",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "创建指定名称的值转换器。",
        "name": "value_converter_create",
        "return": {
          "type": "value_converter_t*",
          "desc": "返回value_converter对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          },
          {
            "type": "tk_create_t",
            "name": "create",
            "desc": "创建函数。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "注册值转换器的创建函数。",
        "name": "value_converter_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_converter_create_t",
            "name": "create",
            "desc": "创建函数。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "注册值转换器的通用创建函数(主要给脚本语言使用)。",
        "name": "value_converter_register_generic",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "初始化值转换器的全局对象。",
        "name": "value_converter_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "释放值转换器的全局对象。",
        "name": "value_converter_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/value_converter.h",
    "desc": "值转换器。\n\n如果数据在View上显示的格式和在Model中保存的格式不一样，value_converter负责在两者之间转换。",
    "name": "value_converter_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_validator_t*",
            "name": "validator",
            "desc": "validator对象。"
          },
          {
            "type": "value_t*",
            "name": "value",
            "desc": "待验证的值。"
          },
          {
            "type": "str_t*",
            "name": "str",
            "desc": "返回错误信息。"
          }
        ],
        "annotation": {},
        "desc": "检查值是否有效。",
        "name": "value_validator_is_valid",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示有效，否则表示无效。"
        }
      },
      {
        "params": [
          {
            "type": "value_validator_t*",
            "name": "validator",
            "desc": "validator对象。"
          },
          {
            "type": "value_t*",
            "name": "value",
            "desc": "修正后的值。"
          }
        ],
        "annotation": {},
        "desc": "将无效值修改为正确的值。",
        "name": "value_validator_fix",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_validator_t*",
            "name": "validator",
            "desc": "validator对象。"
          },
          {
            "type": "object_t*",
            "name": "context",
            "desc": "上下文对象。"
          }
        ],
        "annotation": {},
        "desc": "设置上下文对象。\n\n有时需要根据一个上下文，才能决定数据是否有效。",
        "name": "value_validator_set_context",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "创建指定名称的值校验器。",
        "name": "value_validator_create",
        "return": {
          "type": "value_validator_t*",
          "desc": "返回validator对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          },
          {
            "type": "tk_create_t",
            "name": "create",
            "desc": "创建函数。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "注册值校验器的创建函数。",
        "name": "value_validator_register",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "value_validator_create_t",
            "name": "create",
            "desc": "创建函数。"
          }
        ],
        "annotation": {
          "static": true
        },
        "desc": "注册值转换器的通用创建函数(主要用于脚本语言)。",
        "name": "value_validator_register_generic",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "初始化值校验器的全局对象。",
        "name": "value_validator_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {
          "static": true
        },
        "desc": "释放值校验器的全局对象。",
        "name": "value_validator_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/value_validator.h",
    "desc": "值校验器。\n\n用户在界面上输入的类型可能是无效的，value_validator负责将检查用户输入的有效性。",
    "name": "value_validator_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "请求参数。"
          }
        ],
        "annotation": {},
        "desc": "创建array模型对象。",
        "name": "view_model_array_dummy_create",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "清除全部submodel。",
        "name": "view_model_array_dummy_clear",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "view_model_t*",
            "name": "submodel",
            "desc": "submodel对象。"
          }
        ],
        "annotation": {},
        "desc": "增加submodel。\n\n> 增加submodel的引用计数，并保存submodel的引用。",
        "name": "view_model_array_dummy_add",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "submodel的索引。"
          }
        ],
        "annotation": {},
        "desc": "删除指定的submodel。",
        "name": "view_model_array_dummy_remove",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "submodel的索引。"
          }
        ],
        "annotation": {},
        "desc": "获取指定的submodel。",
        "name": "view_model_array_dummy_get",
        "return": {
          "type": "view_model_t",
          "desc": "返回指定的submodel。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "获取submodel的个数。",
        "name": "view_model_array_dummy_size",
        "return": {
          "type": "int32_t",
          "desc": "返回submodel的个数。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/view_model_array_dummy.h",
    "desc": "array view_model",
    "name": "view_model_array_dummy_t",
    "parent": "view_model_array_dummy_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "初始化。",
        "name": "view_model_init",
        "return": {
          "type": "ret_t",
          "desc": "返回view_model对象。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "~初始化。",
        "name": "view_model_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "request对象。"
          }
        ],
        "annotation": {},
        "desc": "打开视图即将加载模型时通知view_model。",
        "name": "view_model_on_will_mount",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "视图与模型绑定完成后通知模型。",
        "name": "view_model_on_mount",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "视图即将关闭时通知模型。",
        "name": "view_model_on_will_unmount",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "视图销毁时通知模型。",
        "name": "view_model_on_unmount",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "expr",
            "desc": "表达式。"
          }
        ],
        "annotation": {},
        "desc": "对表达式预处理。",
        "name": "view_model_preprocess_expr",
        "return": {
          "type": "ret_t",
          "desc": "返回处理后的表达式。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "prop",
            "desc": "表达式。"
          }
        ],
        "annotation": {},
        "desc": "对属性进行预处理。",
        "name": "view_model_preprocess_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回处理后的表达式。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名称。"
          }
        ],
        "annotation": {},
        "desc": "检查指定的属性是否存在。",
        "name": "view_model_has_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "value_t*",
            "name": "value",
            "desc": "属性值。"
          }
        ],
        "annotation": {},
        "desc": "获取指定属性的值。",
        "name": "view_model_get_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "value_t*",
            "name": "value",
            "desc": "属性值。"
          }
        ],
        "annotation": {},
        "desc": "设置指定属性的值。",
        "name": "view_model_set_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "命令名。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {},
        "desc": "检查指定的命令是否可以执行。",
        "name": "view_model_can_exec",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示可以执行，否则表示不可以执行。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "命令名。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令的参数。"
          }
        ],
        "annotation": {},
        "desc": "执行指定的命令。",
        "name": "view_model_exec",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "触发props改变事件。",
        "name": "view_model_notify_props_changed",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {},
        "desc": "创建子ViewModel。",
        "name": "view_model_create_sub_view_model",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称。"
          }
        ],
        "annotation": {},
        "desc": "创建子ViewModelArray。",
        "name": "view_model_create_sub_view_model_array",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/view_model.h",
    "desc": "视图模型的基类。",
    "name": "view_model_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "req",
        "desc": "请求对象。",
        "type": "navigator_request_t*"
      }
    ],
    "header": "base/view_model.h",
    "desc": "打开视图即将加载模型时通知view_model时的数据结构。",
    "name": "view_model_will_mount_event_t",
    "parent": "event_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建buzzer对象。",
        "name": "buzzer_log_create",
        "return": {
          "type": "object_t*",
          "desc": "返回object对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "hardware/buzzer_log.h",
    "desc": "",
    "name": "buzzer_log_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [],
    "header": "hardware/device_object.h",
    "desc": "外设。\n\n> 目前device\\_object并没有做实际的工作，引入device\\_object的目的是保持概念一致性。",
    "name": "device_object_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建temperature_sensor对象。",
        "name": "temperature_sensor_random_create",
        "return": {
          "type": "object_t*",
          "desc": "返回object对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "hardware/temperature_sensor_random.h",
    "desc": "模拟的温度传感器，随机生成0-100之间的温度。",
    "name": "temperature_sensor_random_t",
    "parent": "object_t",
    "level": 2
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "创建navigator_handler对象(主要给脚本和DLL使用)。",
        "name": "navigator_handler_awtk_create",
        "return": {
          "type": "navigator_handler_t*",
          "desc": "返回navigator_handler对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "awtk/navigator_handler_awtk.h",
    "desc": "基于AWTK实现的导航处理器，负责打开指定的窗口。",
    "name": "navigator_handler_awtk_t",
    "parent": "navigator_handler_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建数据绑定对象。",
        "name": "command_binding_create",
        "return": {
          "type": "binding_rule_t*",
          "desc": "返回数据绑定对象。"
        }
      },
      {
        "params": [
          {
            "type": "command_binding_t*",
            "name": "rule",
            "desc": "绑定规则对象。"
          }
        ],
        "annotation": {},
        "desc": "检查当前的命令是否可以执行。",
        "name": "command_binding_can_exec",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示可以执行，否则表示不可以执行。"
        }
      },
      {
        "params": [
          {
            "type": "command_binding_t*",
            "name": "rule",
            "desc": "绑定规则对象。"
          }
        ],
        "annotation": {},
        "desc": "执行当前的命令。",
        "name": "command_binding_exec",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "close_window",
        "desc": "执行命令之后，是否关闭当前窗口。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "quit_app",
        "desc": "执行命令之后，是否推出应用程序。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "update_model",
        "desc": "执行命令之前，是否更新数据到模型。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "command",
        "desc": "命令名称。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "args",
        "desc": "命令参数。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "event",
        "desc": "事件名称。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "key_filter",
        "desc": "按键过滤(主要用于按键事件，相当于快捷键)。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "auto_disable",
        "desc": "是否根据can_exec自动禁用控件(缺省为TRUE)。",
        "type": "bool_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/command_binding.h",
    "desc": "命令绑定规则。",
    "name": "command_binding_t",
    "parent": "binding_rule_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {
          "constructor": true
        },
        "desc": "创建数据绑定对象。",
        "name": "data_binding_create",
        "return": {
          "type": "binding_rule_t*",
          "desc": "返回数据绑定对象。"
        }
      },
      {
        "params": [
          {
            "type": "data_binding_t*",
            "name": "rule",
            "desc": "绑定规则对象。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "值对象。"
          }
        ],
        "annotation": {},
        "desc": "从模型中获取属性值。",
        "name": "data_binding_get_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "data_binding_t*",
            "name": "rule",
            "desc": "绑定规则对象。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "值对象。"
          }
        ],
        "annotation": {},
        "desc": "设置属性值到模型。",
        "name": "data_binding_set_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "初始化MVVM base",
        "name": "mvvm_base_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "~初始化MVVM base",
        "name": "mvvm_base_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "path",
        "desc": "模型中的数据名称。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "prop",
        "desc": "控件的属性。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "converter",
        "desc": "格式转换器的名称。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "to_view",
        "desc": "转换成视图需要的格式。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "to_model",
        "desc": "转换成模型需要的格式。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "validator",
        "desc": "数据校验器的名称。",
        "type": "char*",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "mode",
        "desc": "绑定模式。",
        "type": "binding_mode_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "trigger;",
        "desc": "触发更新模型的时机。",
        "type": "update_model_trigger_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/data_binding.h",
    "desc": "数据绑定规则。",
    "name": "data_binding_t",
    "parent": "binding_rule_t",
    "annotation": {
      "scriptable": true
    },
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_convert_t",
            "name": "to_model",
            "desc": "到模型的转换函数。"
          },
          {
            "type": "value_convert_t",
            "name": "to_view",
            "desc": "到视图的转换函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "",
        "name": "value_converter_delegate_create",
        "return": {
          "type": "value_converter_t*",
          "desc": "返回value_converter对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/value_converter_delegate.h",
    "desc": "把两个转换函数包装成value_converter_t接口。",
    "name": "value_converter_delegate_t",
    "parent": "value_converter_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "value_is_valid_t",
            "name": "is_valid",
            "desc": "有效性检查函数。"
          },
          {
            "type": "value_fix_t",
            "name": "value_fix_t",
            "desc": "修正函数。"
          }
        ],
        "annotation": {
          "constructor": true
        },
        "desc": "创建value_validator对象。",
        "name": "value_validator_delegate_create",
        "return": {
          "type": "value_validator_t*",
          "desc": "返回value_validator对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/value_validator_delegate.h",
    "desc": "把有效性检查函数包装成value_validator_t接口。",
    "name": "value_validator_delegate_t",
    "parent": "value_validator_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "初始化。",
        "name": "view_model_array_init",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "~初始化。",
        "name": "view_model_array_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "增加cursor的值。",
        "name": "view_model_array_inc_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "uint32_t",
            "name": "cursor",
            "desc": "的值。"
          }
        ],
        "annotation": {},
        "desc": "设置cursor的值。",
        "name": "view_model_array_set_cursor",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "uint32_t",
            "name": "index",
            "desc": "选定项的序数。"
          }
        ],
        "annotation": {},
        "desc": "选中指定项。",
        "name": "view_model_array_set_selected_index",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          }
        ],
        "annotation": {},
        "desc": "触发items改变事件。",
        "name": "view_model_array_notify_items_changed",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "const value_t*",
            "name": "v",
            "desc": "属性值。"
          }
        ],
        "annotation": {},
        "desc": "set prop的默认实现。",
        "name": "view_model_array_default_set_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "属性名。"
          },
          {
            "type": "value_t*",
            "name": "v",
            "desc": "属性值。"
          }
        ],
        "annotation": {},
        "desc": "get prop的默认实现。",
        "name": "view_model_array_default_get_prop",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "命令名。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令参数。"
          }
        ],
        "annotation": {},
        "desc": "exec的默认实现。",
        "name": "view_model_array_default_exec",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "view_model对象。"
          },
          {
            "type": "const char*",
            "name": "name",
            "desc": "命令名。"
          },
          {
            "type": "const char*",
            "name": "args",
            "desc": "命令参数。"
          }
        ],
        "annotation": {},
        "desc": "can exec的默认实现。",
        "name": "view_model_array_default_can_exec",
        "return": {
          "type": "bool_t",
          "desc": "返回TRUE表示可以执行，否则表示不能执行。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "cursor",
        "desc": "当前可以访问的submodel。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      },
      {
        "name": "selected_index",
        "desc": "当前选择的项。",
        "type": "uint32_t",
        "annotation": {
          "readable": true
        }
      }
    ],
    "header": "base/view_model_array.h",
    "desc": "array view_model",
    "name": "view_model_array_t",
    "parent": "view_model_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "请求参数。"
          }
        ],
        "annotation": {},
        "desc": "创建compositor对象。",
        "name": "view_model_compositor_create",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      },
      {
        "params": [
          {
            "type": "view_model_t*",
            "name": "view_model",
            "desc": "compositor对象。"
          },
          {
            "type": "view_model_t*",
            "name": "vm",
            "desc": "待加入的view model对象。"
          }
        ],
        "annotation": {},
        "desc": "像compositor对象中增加一个view model对象。",
        "name": "view_model_compositor_add",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/view_model_compositor.h",
    "desc": "将多个view model组合起来，当一个view model使用。",
    "name": "view_model_compositor_t",
    "parent": "view_model_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "请求参数。"
          }
        ],
        "annotation": {},
        "desc": "创建dummy模型对象。\n\n对于一些简单的窗口，只需要简单的导航(打开或关闭窗口)，可以不用实现自己的模型，而使用dummy模型。",
        "name": "view_model_dummy_create",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/view_model_dummy.h",
    "desc": "dummy view_model",
    "name": "view_model_dummy_t",
    "parent": "view_model_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "待包装的对象。"
          }
        ],
        "annotation": {},
        "desc": "创建view_model对象。",
        "name": "view_model_object_wrapper_create",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "待包装的对象。"
          },
          {
            "type": "const char*",
            "name": "prop_prefix",
            "desc": "属性路径的前缀(可以为NULL)。"
          }
        ],
        "annotation": {},
        "desc": "创建view_model对象。",
        "name": "view_model_object_wrapper_create_ex",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/view_model_object_wrapper.h",
    "desc": "把object包装成view model。",
    "name": "view_model_object_wrapper_t",
    "parent": "view_model_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [],
    "events": [],
    "properties": [
      {
        "name": "volume",
        "desc": "音量(0-100)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true
        }
      },
      {
        "name": "duration",
        "desc": "持续时间(ms)。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true
        }
      },
      {
        "name": "freq",
        "desc": "频率。",
        "type": "uint32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true
        }
      },
      {
        "name": "on",
        "desc": "开启。",
        "type": "bool_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true
        }
      }
    ],
    "header": "hardware/buzzer.h",
    "desc": "蜂鸣器。",
    "name": "buzzer_t",
    "parent": "device_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "初始化jerryscript awtk related stuff。",
        "name": "jerryscript_awtk_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "初始化jerryscript awtk related stuff。",
        "name": "jerryscript_awtk_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_value_from_navigator_request"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_value_to_navigator_request"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_value_to_value"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_value_from_value"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_value_to_pointer"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_value_from_pointer"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_value_check"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_value_to_value"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_value_to_value"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "annotation [\"global\"]\nexport for test only",
        "name": "jerry_release_value"
      },
      {
        "params": [],
        "annotation": {},
        "desc": "初始化MVVM jerryscript。",
        "name": "mvvm_jerryscript_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          },
          {
            "type": "const char*",
            "name": "code",
            "desc": "代码。"
          },
          {
            "type": "uint32_t",
            "name": "code_size",
            "desc": "代码长度。"
          }
        ],
        "annotation": {},
        "desc": "执行js代码。",
        "name": "jerryscript_run",
        "export": "none",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "文件名。"
          },
          {
            "type": "const char*",
            "name": "code",
            "desc": "代码。"
          },
          {
            "type": "uint32_t",
            "name": "code_size",
            "desc": "代码长度。"
          }
        ],
        "annotation": {},
        "desc": "执行js代码，并返回jerry对象。",
        "name": "jerryscript_eval",
        "export": "none",
        "return": {
          "type": "jerry_value_t",
          "desc": "返回jerry_value对象。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "~初始化MVVM jerryscript。",
        "name": "mvvm_jerryscript_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [
      {
        "name": "value",
        "desc": "最新的温度。",
        "type": "double",
        "annotation": {
          "get_prop": true
        }
      },
      {
        "name": "sample_interval",
        "desc": "采样时间间隔(ms)。",
        "type": "int32_t",
        "annotation": {
          "set_prop": true,
          "get_prop": true
        }
      }
    ],
    "header": "hardware/temperature_sensor.h",
    "desc": "温度传感器。",
    "name": "temperature_sensor_t",
    "parent": "device_object_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "初始化jerryscript value converter，注册相应的工厂函数。",
        "name": "value_converter_jerryscript_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "~初始化jerryscript value converter。",
        "name": "value_converter_jerryscript_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "jerryscript/value_converter_jerryscript.h",
    "desc": "将jerryscript包装成值转换对象。\n\nJS的全局对象ValueConverters，记录了所有的ValueConverter。",
    "name": "value_converter_jerryscript_t",
    "parent": "value_converter_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [],
        "annotation": {},
        "desc": "初始化jerryscript value validator，注册相应的工厂函数。",
        "name": "value_validator_jerryscript_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "~初始化jerryscript value validator。",
        "name": "value_validator_jerryscript_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "jerryscript/value_validator_jerryscript.h",
    "desc": "将jerryscript包装成值校验对象。\n\nJS的全局对象ValueValidators，记录了所有的ValueValidator。",
    "name": "value_validator_jerryscript_t",
    "parent": "value_validator_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "jerry_value_t*",
            "name": "jsobj",
            "desc": "js对象。"
          }
        ],
        "annotation": {},
        "desc": "将jsobj包装成view_model。",
        "name": "view_model_array_jerryscript_create",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      },
      {
        "params": [
          {
            "type": "const char*",
            "name": "name",
            "desc": "名称(通常是文件名)。"
          },
          {
            "type": "const char*",
            "name": "code",
            "desc": "代码字符字符串(UTF8)。"
          },
          {
            "type": "uint32_t",
            "name": "code_size",
            "desc": "代码的长度。"
          },
          {
            "type": "navigator_request_t*",
            "name": "req",
            "desc": "请求的参数(可选)。"
          }
        ],
        "annotation": {},
        "desc": "通过一段JS代码创建一个view_model对象。",
        "name": "view_model_jerryscript_create",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "jerryscript/view_model_array_jerryscript.h",
    "desc": "wrap jerryscript code to a view_model",
    "name": "view_model_array_jerryscript_t",
    "parent": "view_model_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "jerry_value_t*",
            "name": "jsobj",
            "desc": "js对象。"
          }
        ],
        "annotation": {},
        "desc": "将jsobj包装成view_model。",
        "name": "view_model_normal_jerryscript_create",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "初始化MVVM。",
        "name": "mvvm_init",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      },
      {
        "params": [],
        "annotation": {},
        "desc": "~初始化MVVM。",
        "name": "mvvm_deinit",
        "return": {
          "type": "ret_t",
          "desc": "返回RET_OK表示成功，否则表示失败。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "jerryscript/view_model_normal_jerryscript.h",
    "desc": "wrap jerryscript code to a view_model",
    "name": "view_model_normal_jerryscript_t",
    "parent": "view_model_t",
    "level": 3
  },
  {
    "type": "class",
    "methods": [
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "待包装的对象。"
          }
        ],
        "annotation": {},
        "desc": "创建view_model对象。",
        "name": "view_model_array_object_wrapper_create",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      },
      {
        "params": [
          {
            "type": "object_t*",
            "name": "obj",
            "desc": "待包装的对象。"
          },
          {
            "type": "const char*",
            "name": "prop_prefix",
            "desc": "属性路径的前缀(可以为NULL)。"
          }
        ],
        "annotation": {},
        "desc": "创建view_model对象。",
        "name": "view_model_array_object_wrapper_create_ex",
        "return": {
          "type": "view_model_t*",
          "desc": "返回view_model对象。"
        }
      }
    ],
    "events": [],
    "properties": [],
    "header": "base/view_model_array_object_wrapper.h",
    "desc": "把object包装成view model array。",
    "name": "view_model_array_object_wrapper_t",
    "parent": "view_model_array_t",
    "level": 4
  }
]