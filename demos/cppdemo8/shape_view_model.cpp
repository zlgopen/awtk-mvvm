
/*This file is generated by code generator*/

#include "tkc/mem.h"
#include "tkc/utils.h"
#include "mvvm/base/utils.h"
#include "shape_view_model.h"

static ret_t shape_view_model_set_prop(tk_object_t* obj, const char* name, const value_t* v) {
  Shape* aShape = ((shape_view_model_t*)(obj))->aShape;

  if (tk_str_ieq("type", name)) {
    aShape->type = value_int32(v);

    return RET_OK;
  } else if (tk_str_ieq("x", name)) {
    aShape->x = value_int32(v);

    return RET_OK;
  } else if (tk_str_ieq("y", name)) {
    aShape->y = value_int32(v);

    return RET_OK;
  } else if (tk_str_ieq("w", name)) {
    aShape->w = value_int32(v);

    return RET_OK;
  } else if (tk_str_ieq("h", name)) {
    aShape->h = value_int32(v);

    return RET_OK;
  } else if (tk_str_ieq("opacity", name)) {
    aShape->opacity = value_int32(v);

    return RET_OK;
  } else if (tk_str_ieq("align", name)) {
    aShape->align = value_int32(v);

    return RET_OK;
  } else if (tk_str_ieq("name", name)) {
    aShape->name = value_str(v);

    return RET_OK;
  } else if (tk_str_ieq("overview", name)) {
    aShape->overview = value_str(v);

    return RET_OK;
  }

  return RET_NOT_FOUND;
}

static ret_t shape_view_model_get_prop(tk_object_t* obj, const char* name, value_t* v) {
  Shape* aShape = ((shape_view_model_t*)(obj))->aShape;

  if (tk_str_ieq("type", name)) {
    value_set_int32(v, aShape->type);
    return RET_OK;
  } else if (tk_str_ieq("x", name)) {
    value_set_int32(v, aShape->x);
    return RET_OK;
  } else if (tk_str_ieq("y", name)) {
    value_set_int32(v, aShape->y);
    return RET_OK;
  } else if (tk_str_ieq("w", name)) {
    value_set_int32(v, aShape->w);
    return RET_OK;
  } else if (tk_str_ieq("h", name)) {
    value_set_int32(v, aShape->h);
    return RET_OK;
  } else if (tk_str_ieq("opacity", name)) {
    value_set_int32(v, aShape->opacity);
    return RET_OK;
  } else if (tk_str_ieq("align", name)) {
    value_set_int32(v, aShape->align);
    return RET_OK;
  } else if (tk_str_ieq("name", name)) {
    value_set_str(v, aShape->name.c_str());
    return RET_OK;
  } else if (tk_str_ieq("overview", name)) {
    value_set_str(v, aShape->GetOverview());
    return RET_OK;
  }

  return RET_NOT_FOUND;
}

static bool_t shape_view_model_can_exec(tk_object_t* obj, const char* name, const char* args) {
  shape_view_model_t* vm = (shape_view_model_t*)(obj);
  Shape* aShape = vm->aShape;
  if (tk_str_ieq("changeType", name)) {
    return TRUE;

  } else if (tk_str_ieq("Save", name)) {
    return aShape->CanSave();
  }
  return FALSE;
}

static ret_t shape_view_model_exec(tk_object_t* obj, const char* name, const char* args) {
  shape_view_model_t* vm = (shape_view_model_t*)(obj);
  Shape* aShape = vm->aShape;
  if (tk_str_ieq("changeType", name)) {
    return aShape->ChangeType(tk_atoi(args));

  } else if (tk_str_ieq("Save", name)) {
    return aShape->Save();
  }
  return RET_NOT_FOUND;
}

static ret_t shape_view_model_on_destroy(tk_object_t* obj) {
  shape_view_model_t* vm = (shape_view_model_t*)(obj);
  return_value_if_fail(vm != NULL, RET_BAD_PARAMS);

  delete (vm->aShape);

  return view_model_deinit(VIEW_MODEL(obj));
}

static const object_vtable_t s_shape_view_model_vtable = {"shape_view_model_t",
                                                          "shape_view_model_t",
                                                          sizeof(shape_view_model_t),
                                                          FALSE,
                                                          shape_view_model_on_destroy,
                                                          NULL,
                                                          shape_view_model_get_prop,
                                                          shape_view_model_set_prop,
                                                          NULL,
                                                          NULL,
                                                          shape_view_model_can_exec,
                                                          shape_view_model_exec};

view_model_t* shape_view_model_create_with(Shape* aShape) {
  tk_object_t* obj = tk_object_create(&s_shape_view_model_vtable);
  view_model_t* vm = view_model_init(VIEW_MODEL(obj));
  shape_view_model_t* shape_view_model = (shape_view_model_t*)(vm);

  return_value_if_fail(vm != NULL, NULL);

  shape_view_model->aShape = aShape;

  return vm;
}

ret_t shape_view_model_attach(view_model_t* vm, Shape* aShape) {
  shape_view_model_t* shape_view_model = (shape_view_model_t*)(vm);
  return_value_if_fail(vm != NULL, RET_BAD_PARAMS);

  shape_view_model->aShape = aShape;

  return RET_OK;
}

view_model_t* shape_view_model_create(navigator_request_t* req) {
  Shape* aShape = new Shape();
  return_value_if_fail(aShape != NULL, NULL);

  return shape_view_model_create_with(aShape);
}
